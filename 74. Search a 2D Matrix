// class Solution {            //binary+binary still slow
// public:
//     bool binSearch(vector<int> arr, int target){
//         // for(int x: arr){
//         //     cout<<x<<" ";
//         // }
//         int l=0, r=arr.size()-1, mid;
//         while(l<=r){
//             mid = l+ (r-l)/2;
//             if(arr[mid]==target) return true;
//             else if(arr[mid]<target) l= mid+1;
//             else    r = mid-1;
//         }
//         return false;
//     }
    
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int rows = matrix.size();
//         int cols = matrix[0].size();
//         int l = 0, r = rows-1, mid;
//         if(target > matrix[rows-1][cols-1]) return false;
        
//         while(l<=r){
//             mid = l + (r-l)/2;  //(l+r)/2 can go out of range
//             if(l==r){
//                 if(binSearch(matrix[l], target)) return true;
//                 else break;
//             }
//             if(matrix[mid][cols-1]<target){
//                 l = mid+1;
//             }
//             else if(matrix[mid][cols-1]>=target){
//                 r = mid;
//             }
//         }
//         return false;
//     }
// };/*Runtime: 9 ms, faster than 41.30% of C++ online submissions for Search a 2D Matrix.
// Memory Usage: 9.6 MB, less than 51.32% of C++ online submissions for Search a 2D Matrix.*/

// class Solution {            //semi bruteforce but slow idk
// public:
//     bool searchMatrix(vector<vector<int>>& matrix, int target) {
//         int rows = matrix.size();
//         int cols = matrix[0].size();
//         for(int i=0; i<rows; i++){
//             if(matrix[i][cols-1]<target) 
//                 continue;
//             else{
//                  if(binary_search(&matrix[i][0], &matrix[i][0]+cols, target)) return true;
//                 else break;
//             }
//         }
//         return false;
//     }
// };
// Runtime: 16 ms, faster than 6.53% of C++ online submissions for Search a 2D Matrix.
// Memory Usage: 9.6 MB, less than 5.11% of C++ online submissions for Search a 2D Matrix.

class Solution {            //bruteforce:fastest (maybe testcases are simpler then expected)
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) {
        int rows = matrix.size();
        int cols = matrix[0].size();
        for(int i=0; i<rows; i++){           //find row
            if(matrix[i][cols-1]<target) 
                continue;
            else{
                for(int j=0; j<cols; j++){   //find col
                    if(matrix[i][j]==target)    
                        return true;
                }
                break;
            }
        }
        return false;                        //return false if not found within range
    }
};
// Runtime: 3 ms, faster than 93.62% of C++ online submissions for Search a 2D Matrix.
// Memory Usage: 9.5 MB, less than 51.32% of C++ online submissions for Search a 2D Matrix.
